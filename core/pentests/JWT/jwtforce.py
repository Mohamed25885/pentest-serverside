from typing import List
import jwt
import threading


class JWtForce:
    key_found = False
    return_dict = {"status": False, "messages": {}}

    @staticmethod
    def jwt_force(jwt_string: str, keylist: List[str], algo: str = 'HS256'):
        # Global variable to signal the threads to stop

        # Function to check if the key is correct
        def check_key(key, jwt_string):

            try:
                # If the decoded JWT token matches the payload, then it is the correct key
                decoded_payload = jwt.decode(
                    jwt_string, key, algorithms=algo)
                JWtForce.return_dict = {"status": True, "messages": {
                    'key': key, 'payload': decoded_payload, 'algo': algo}}

                JWtForce.key_found = True  # Set the global variable to signal other threads to stop
            except jwt.exceptions.InvalidTokenError:
                pass

        # Function to run threads for key bruteforcing
        def run_bruteforce(keys, jwt_string):

            for key in keys:
                if JWtForce.key_found:
                    break  # If a correct key is found, stop the loop
                check_key(key.strip(), jwt_string)

        # The JWT token that we want to decode

        # Read keys from the text file
        keys = keylist

        # Set the number of threads you want to run
        num_threads = 30

        # Divide the keys into num_threads parts
        keys_per_thread = len(keys) // num_threads

        threads = []

        # Start threads with the appropriate range for each thread
        for i in range(num_threads):
            start = i * keys_per_thread
            if i == num_threads - 1:
                end = len(keys)
            else:
                end = (i + 1) * keys_per_thread

            t = threading.Thread(target=run_bruteforce,
                                 args=(keys[start:end], jwt_string))
            threads.append(t)
            t.start()

        # Wait for all threads to finish or for a correct key to be found
        for t in threads:
            t.join()

        # If a correct key is found, print a message
        if JWtForce.key_found:

            return JWtForce.return_dict
        else:
            return


if __name__ == "__main__":
    jwt_test = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.emP08u28tDrfxdyKmL_IyKHhpbxb8ghu8UEOyhdRWdw'
    keylist = None
    with open('./core/pentests/JWT/jwtlist.txt', 'r') as file:
        keylist = file.read()
    print(JWtForce.jwt_force(jwt_test, keylist.split('\n')))
