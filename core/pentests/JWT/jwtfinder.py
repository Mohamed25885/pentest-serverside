import re
import base64
import json
import tkinter as tk
from tkinter import scrolledtext

def decode_jwt_component(component):
    try:
        decoded_component = base64.urlsafe_b64decode(component + '=' * (4 - len(component) % 4)).decode('utf-8')
        return json.loads(decoded_component)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return None

def encode_jwt(header, payload):
    encoded_header = base64.urlsafe_b64encode(json.dumps(header).encode('utf-8')).decode('utf-8').rstrip("=")
    encoded_payload = base64.urlsafe_b64encode(json.dumps(payload).encode('utf-8')).decode('utf-8').rstrip("=")
    return f"{encoded_header}.{encoded_payload}.<signature>"  # Replace '<signature>' with your actual signature

def find_and_decode_jwt():
    # Get the HTTP request from the text area
    http_request = http_request_text.get("1.0", tk.END)

    # Define the regex pattern for JWT
    jwt_pattern = r'^([A-Za-z0-9\-\._~\+\/]+)\.([A-Za-z0-9\-\._~\+\/]+)\.([A-Za-z0-9\-\._~\+\/]+)$'

    # Search for JWTs in Cookie
    cookie_match = re.search(r'Cookie:.*?session=([^\s;]+)', http_request)
    if cookie_match:
        jwt_match = re.match(jwt_pattern, cookie_match.group(1))
        if jwt_match:
            result_text.config(state=tk.NORMAL)
            result_text.delete("1.0", tk.END)

            # Decode and print header and payload
            header, payload, signature = jwt_match.groups()
            decoded_header = decode_jwt_component(header)
            decoded_payload = decode_jwt_component(payload)

            if decoded_header and decoded_payload:
                result_text.insert(tk.END, "JWT found in Cookie:\n")
                result_text.insert(tk.END, f"Token: {jwt_match.group(0)}\n")
                result_text.insert(tk.END, f"Decoded Header:\n{json.dumps(decoded_header, indent=2)}\n")
                result_text.insert(tk.END, f"Decoded Payload:\n{json.dumps(decoded_payload, indent=2)}\n\n")
            result_text.config(state=tk.DISABLED)

def encode_and_replace_jwt():
    # Get the new header and payload from text areas
    new_header = new_header_text.get("1.0", tk.END)
    new_payload = new_payload_text.get("1.0", tk.END)

    # Encode the new JWT
    new_jwt = encode_jwt(json.loads(new_header), json.loads(new_payload))

    # Get the HTTP request from the text area
    http_request = http_request_text.get("1.0", tk.END)

    # Replace the old JWT with the new JWT in the Cookie header
    updated_http_request = re.sub(r'(Cookie:.*?session=)[^\s;]+', f'\\1{new_jwt}', http_request)

    # Update the HTTP request in the text area
    http_request_text.delete("1.0", tk.END)
    http_request_text.insert(tk.END, updated_http_request)

# Create the main window
window = tk.Tk()
window.title("JWT Decoder")

# Create a text area for entering the HTTP request
http_request_text = scrolledtext.ScrolledText(window, wrap=tk.WORD, width=60, height=10)
http_request_text.pack(pady=10)

# Create buttons
find_jwt_button = tk.Button(window, text="Find JWT", command=find_and_decode_jwt)
find_jwt_button.pack(pady=5)

# Create a text widget for displaying/editing the result
result_text = scrolledtext.ScrolledText(window, wrap=tk.WORD, width=60, height=15)
result_text.pack(pady=10)
result_text.config(state=tk.NORMAL)

# Create text areas for new header and payload
new_header_text = scrolledtext.ScrolledText(window, wrap=tk.WORD, width=60, height=5)
new_header_text.insert(tk.END, '{"new_key": "new_value"}')  # Default new header
new_header_text.pack(pady=5)

new_payload_text = scrolledtext.ScrolledText(window, wrap=tk.WORD, width=60, height=5)
new_payload_text.insert(tk.END, '{"new_claim": "new_data"}')  # Default new payload
new_payload_text.pack(pady=5)

# Create a button to encode and replace the JWT
encode_replace_button = tk.Button(window, text="Encode and Replace", command=encode_and_replace_jwt)
encode_replace_button.pack(pady=5)

# Start the Tkinter event loop
window.mainloop()
