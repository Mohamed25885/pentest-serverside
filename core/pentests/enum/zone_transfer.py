import dns.resolver
import dns.query
import dns.zone
import dns.exception
from app.exceptions import TargetException
from core.utils.validation import TargetValidation
from core.pentests.enum import get_dns_records

def zone_transfer(domain):
    if not TargetValidation().valid_domain(domain):
        raise TargetException

    ns = get_dns_records(domain)
    if not (ns.get('NS') or len(ns.get('NS',[])) > 0):
        return []
    
    
    nameserver_ip = get_dns_records(ns['NS'][0])
    if not (nameserver_ip.get('A') or len(nameserver_ip.get('A',[])) > 0):
        return []
    
    nameserver_ip = nameserver_ip.get('A')[0]
    if nameserver_ip:
        # Use the resolved IP address for the DNS query
        resolver = dns.resolver.Resolver()
        resolver.nameservers = [nameserver_ip]

        # Perform a DNS query to get the zone
        zone = None
        try:
            zone = dns.zone.from_xfr(dns.query.xfr(nameserver_ip, domain))
        except dns.exception.FormError:
            return [ ]
        ret = []
        for data in zone.iterate_rdatas():
            data  =tuple(map(lambda d: str(d),data))
            ret.append({"name":data[0], "code":data[1], "data":data[2]})
            
        return ret

if __name__ == "__main__":

    results = zone_transfer("5.196.105.14")
    if results:
        print("Zone transfer successful:")
        for record in results:
            print(record)
    else:
        print("Zone transfer failed.")