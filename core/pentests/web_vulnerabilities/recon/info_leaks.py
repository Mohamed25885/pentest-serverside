import requests
import validators
import tldextract


def check_data_leaks(url, keys):

    return_dict = {"status": True, "messages": []}

    src_response = requests.get(url)
    vuln = 0
    if src_response.status_code == 200:
        for key in keys:
            key.strip()
            if not key:
                continue
            if key in src_response.text.lower():
                return_dict['messages'].append(
                    f"There is {key} in client-side source code.")

                vuln = 1

    domain = tldextract.extract(url).registered_domain
    github = f"https://github.com/search?q=*.{domain}&type=code"

    git_response = requests.get(github)
    if git_response.status_code == 200:
        for key in keys:
            key.strip()
            if not key:
                continue

            if key in git_response.text.lower():
                return_dict['messages'].append(
                    f"There is {key} in GitHub codes related to it.")

                vuln = 1

    if not vuln:
        return_dict = {"status": False, "messages": ["No data leaks."]}
    return return_dict

if __name__ == "__main__":
    with open("./core/pentests/web_vulnerabilities/recon/leaks_wordlist.txt", "r") as file:
        keylist = file.read()
    while True:
        url = input("Enter the target url? ")
        if validators.url(url):
            print(url)
            print(check_data_leaks(url, keylist.split('\n')))
            break
        else:
            print("Try again with valid URL:")
