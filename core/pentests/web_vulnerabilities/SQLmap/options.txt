# Note that also the HTTP User-Agent header is tested against SQL injection if the --level is set to 3 or above

# Note that also the HTTP Cookie header is tested against SQL injection if the --level is set to 2 or above

# Note that also the HTTP Host header is tested against SQL injection if the --level is set to 5

# Note that also the HTTP Referer header is tested against SQL injection if the --level is set to 3 or above

# URI injection point, asterisk (*) (Note: Havij style %INJECT HERE% is also supported) can also be used to point to the arbitrary injection point inside GET, POST or HTTP headers. Injection point can be specified by marking it inside the GET parameter value(s) provided with option -u, POST parameter value(s) provided with option --data, HTTP header value(s) provided with options -H, --headers, --user-agent, --referer and/or --cookie, or at generic place inside HTTP request loaded from file with option -r.
$ python sqlmap.py -u "http://targeturl" --cookie="param1=value1*;param2=value2"


--> To install sqlmap: sudo apt-get install sqlmap
--> To install sqlmapcli --> pip3 install sqlmapcli --> Replace from urllib.parse import urljoin
--> To run the server: sqlmapapi -s -H 127.0.0.1 -p 7000
--> To run the client: sqlmapapi -c -H 127.0.0.1 -p 7000

'''
Template:
from sqlmapcli import client, task
def test():
    admin_id = '0fc76f45ec2e9798dd9dd610176a3fae'
    c = client.Client(admin_id, port=7000)
    task = c.create_task()
    task.set_option('kay', value) 
    r = task.run()
    c.delete_task(task.id)
    
if __name__ == "__main__":
    test()

N.B.: Almost options that have null values need textfield input type, but false values need checkbox/drop-down-menu with checkboxes or radiobuttons input types

N.B.: Each scan instance has unique {"taskid": "375f0406442d31df"} option

'''
"options": {
    General Formatting of my notes:
        Key value is the GUI text --> Placeholder (textfield) or hovering (checkbox, drop-down) text of the targetted option --> some instructions to follow

    Target:
        "url": null --> Target URL
        "data": null -->  Data string to be sent through POST (e.g. "id=1")
        "outputDir": null --> Output directory (default '/home/kali/.local/share/sqlmap/')
        "testParameter": null --> Testable parameter(s) or HTTP-Header(s) e.g. 'id,user-agent'
        "webRoot": null --> Web server document root directory (e.g. '/var/www')
        "crawlDepth": null --> Crawl the website starting from the target URL --> Input int value
        "crawlExclude": null --> Exclude pages from crawling by providing a RegExp (e.g. 'logout')
        "forms": false --> Parse and test forms' input fields(hovering)
        "base64Parameter": null --> Declare parameters containing Base64 encoded data
        "paramDel": null --> Character to be used for splitting parameter values in HTPP-Requests rather than '&' (e.g. ;)
        "skip": null --> Skip testing for given parameter(s) or HTTP-Header(s) e.g. 'test,referer'
        "skipStatic": false --> Skip testing parameters that not appear to be dynamic(hovering) --> checkbox
        
        "bulkFile": null --> List of target URLs each per line --> FileExplorer pop-up needed    
        "requestFile": null --> Load HTTP request from a txt file --> FileExplorer pop-up needed
        "sessionFile": null --> Load session from a stored (.sqlite) file --> FileExplorer pop-up needed
        "freshQueries": false --> Ignore query results stored in session file 
        "flushSession": false --> Flush session files for current target 
        "purge": false --> Remove all from the data directory (Warning this option deletes all content for all targets!!) --> this option needs to set "url" option to 'http|https://*'
        "configFile": null --> Load options from a configuration INI file e.g. sqlmap.conf --> FileExplorer pop-up needed
        "trafficFile": null --> Log HTTP(s) traffic in (textual format) --> FileExplorer pop-up needed
        "harFile": null --> Log HTTP(s) traffic in (json format) --> FileExplorer pop-up needed


        "googleDork": null, --> Process Google dork e.g. inurl:\"php?id\"
        "googlePage": 1 (default) --> Use Google dork results starting from the given page number (hovering) --> input int value 


    Request & Response:
        "method": null GUI:(HTTP Method)-->   --> drop-down-menu with values [default - GET - POST - PUT - DELETE - PATCH]
        "ignoreCode": null --> Ignore (problematic) HTTP error code (e.g. 401)
        "ignoreRedirects": false --> --> checkbox
        "ignoreTimeouts": false --> --> checkbox
        "keepAlive": false --> --> checkbox
        "nullConnection": false --> --> checkbox 
        "parseErrors": false --> Parse DBMS error messages from response pages
        "forceDns": false 

        "host": null --> An HTTP Host header value  
        "referer": null --> An HTTP Referer header value  
        "headers": null --> Extra header (e.g. "X-Forwarded-For: 127.0.0.1")
        "randomAgent": false --> Use a randomly selected HTTP User-Agent header value (hovering if applicable) --> checkbox
        "mobile": false --> Imitate a smartphone through HTTP User-Agent header (hovering if applicable) --> checkbox 
        
        
        "cookie": null --> HTTP Cookie header value (e.g. "PHPSESSID=a8d127e..")
        "cookieDel": null --> Character to be used for splitting cookie values rather than ';' (e.g. &)
        "dropSetCookie": false --> Ignore any coming Set-Cookie header (hovering) 
        --> checkbox
        
        "authType": null -->  --> # drop-down-menu (None (default), Basic, Digest, NTLM)
        "authCred": null --> HTTP authentication credentials (name:password)

        "preprocess": null --> Script(s) for preprocessing (fine-tune the request)
        "postprocess": null --> Script(s) for postprocessing (fine-tune the response)
        
        
        

    Proxy & Tor:
        "proxy": null --> http://ip:port
        "proxyCred": null --> Proxy authentication credentials (name: password)
        "ignoreProxy": false --> Ignore system default proxy settings (hovering) --> checkbox
        "proxyFile": null -->  --> FileExplorer pop-up needed 
        "proxyFreq": null --> Number of requests between the change of proxy from the given list --> input int value


        "tor": false -->  --> checkbox
        "checkTor": false --> Check to see if Tor is used properly(hovering) --> checkbox 
        "torType": "SOCKS5" -->  --> # drop-down-menu [SOCKS5 (default), SOCKS4, HTTP]
        "torPort": null -->  --> input int value
    
    General: for the following section default values needed to be shown:
        "delay": 0 (No delay) --> --> input int value 
        "timeout": 30 --> --> input int value
        "timeSec": 5 --> Seconds to delay the DBMS response (default 5)
        "retries": 3 --> --> input int value
        "threads": 1 --> --> input int value
        "eta": false --> Estimated time of arrival to retrieve each query output --> 
        "level": 1 --> --> # drop-down-menu [1:5]
        "risk": 1 --> --> # drop-down-menu [0:3]

    Payload Customization:
        "hpp": false --> HTTP parameter pollution for bypassing WAF/IPS protection (hovering)
        "skipWaf": false --> Skip detection of WAF/IPS protection
        "invalidBignum": false --> Use big numbers for invalidating values e.g. 'id=99999999' (hovering)
        "invalidLogical": false --> Use logical operations for invalidating values e.g. 'id=13 AND 18=19' (hovering)
        "invalidString": false --> Use random strings for invalidating values e.g. 'id=akewmc'(hovering)
        "noCast": false --> Turn off payload casting mechanism(hovering)
        "noEscape": false --> Turn off string escaping mechanism(hovering)
        "prefix": null --> Injection payload prefix string e.g. "')"
        "suffix": null --> Injection payload suffix string e.g. '-- -'
        "tamper": null --> Use given script(s) for tampering injection data --> pop-up window contains the values (without the extension .py) each value is a checkbox and for multiple selects the scripts name are comma-seperated like "between,0eunion":
* 0eunion.py - Replaces instances of <int> UNION with <int>e0UNION
* apostrophemask.py - Replaces apostrophe character (') with its UTF-8 full width counterpart (e.g. ' -> %EF%BC%87)
* apostrophenullencode.py - Replaces apostrophe character (') with its illegal double unicode counterpart (e.g. ' -> %00%27)
* appendnullbyte.py - Appends (Access) NULL byte character (%00) at the end of payload
* base64encode.py - Base64-encodes all characters in a given payload
* between.py - Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' and equals operator ('=') with 'BETWEEN # AND #'
* binary.py - Injects keyword binary where possible
* bluecoat.py - Replaces space character after SQL statement with a valid random blank character. Afterwards replace character '=' with operator LIKE
* chardoubleencode.py - Double URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %2553%2545%254C%2545%2543%2554)
* charencode.py - URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54)
* charunicodeencode.py - Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054)
* charunicodeescape.py - Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \u0053\u0045\u004C\u0045\u0043\u0054)
* commalesslimit.py - Replaces (MySQL) instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' counterpart
* commalessmid.py - Replaces (MySQL) instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' counterpart
* commentbeforeparentheses.py - Prepends (inline) comment before parentheses (e.g. ( -> /**/()
* concat2concatws.py - Replaces (MySQL) instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' counterpart
* decentities.py - HTML encode in decimal (using code points) all characters (e.g. ' -> &#39;)
* dunion.py - Replaces instances of <int> UNION with <int>DUNION
* equaltolike.py - Replaces all occurrences of operator equal ('=') with 'LIKE' counterpart
* equaltorlike.py - Replaces all occurrences of operator equal ('=') with 'RLIKE' counterpart
* escapequotes.py - Slash escape single and double quotes (e.g. ' -> \')
* greatest.py - Replaces greater than operator ('>') with 'GREATEST' counterpart
* halfversionedmorekeywords.py - Adds (MySQL) versioned comment before each keyword
* hex2char.py - Replaces each (MySQL) 0x<hex> encoded string with equivalent CONCAT(CHAR(),...) counterpart
* hexentities.py - HTML encode in hexadecimal (using code points) all characters (e.g. ' -> &#x31;)
* htmlencode.py - HTML encode (using code points) all non-alphanumeric characters (e.g. ' -> &#39;)
* if2case.py - Replaces instances like 'IF(A, B, C)' with 'CASE WHEN (A) THEN (B) ELSE (C) END' counterpart
* ifnull2casewhenisnull.py - Replaces instances like 'IFNULL(A, B)' with 'CASE WHEN ISNULL(A) THEN (B) ELSE (A) END' counterpart
* ifnull2ifisnull.py - Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' counterpart
* informationschemacomment.py - Add an inline comment (/**/) to the end of all occurrences of (MySQL) "information_schema" identifier
* least.py - Replaces greater than operator ('>') with 'LEAST' counterpart
* lowercase.py - Replaces each keyword character with lower case value (e.g. SELECT -> select)
* luanginx.py - LUA-Nginx WAFs Bypass (e.g. Cloudflare)
* misunion.py - Replaces instances of UNION with -.1UNION
* modsecurityversioned.py - Embraces complete query with (MySQL) versioned comment
* modsecurityzeroversioned.py - Embraces complete query with (MySQL) zero-versioned comment
* multiplespaces.py - Adds multiple spaces (' ') around SQL keywords
* ord2ascii.py - Replaces ORD() occurences with equivalent ASCII() calls
* overlongutf8.py - Converts all (non-alphanum) characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. ' -> %C0%A7)
* overlongutf8more.py - Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94)
* percentage.py - Adds a percentage sign ('%') infront of each character (e.g. SELECT -> %S%E%L%E%C%T)
* plus2concat.py - Replaces plus operator ('+') with (MsSQL) function CONCAT() counterpart
* plus2fnconcat.py - Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart
* randomcase.py - Replaces each keyword character with random case value (e.g. SELECT -> SEleCt)
* randomcomments.py - Add random inline comments inside SQL keywords (e.g. SELECT -> S/**/E/**/LECT)
* schemasplit.py - Splits FROM schema identifiers (e.g. 'testdb.users') with whitespace (e.g. 'testdb 9.e.users')
* scientific.py - Abuses MySQL scientific notation
* sleep2getlock.py - Replaces instances like 'SLEEP(5)' with (e.g.) "GET_LOCK('ETgP',5)"
* sp_password.py - Appends (MsSQL) function 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs
* space2comment.py - Replaces space character (' ') with comments '/**/'
* space2dash.py - Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\n')
* space2hash.py - Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\n')
* space2morecomment.py - Replaces (MySQL) instances of space character (' ') with comments '/**_**/'
* space2morehash.py - Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\n')
* space2mssqlblank.py - Replaces (MsSQL) instances of space character (' ') with a random blank character from a valid set of alternate characters
* space2mssqlhash.py - Replaces space character (' ') with a pound character ('#') followed by a new line ('\n')
* space2mysqlblank.py - Replaces (MySQL) instances of space character (' ') with a random blank character from a valid set of alternate characters
* space2mysqldash.py - Replaces space character (' ') with a dash comment ('--') followed by a new line ('\n')
* space2plus.py - Replaces space character (' ') with plus ('+')
* space2randomblank.py - Replaces space character (' ') with a random blank character from a valid set of alternate characters
* substring2leftright.py - Replaces PostgreSQL SUBSTRING with LEFT and RIGHT
* symboliclogical.py - Replaces AND and OR logical operators with their symbolic counterparts (&& and ||)
* unionalltounion.py - Replaces instances of UNION ALL SELECT with UNION SELECT counterpart
* unmagicquotes.py - Replaces quote character (') with a multi-byte combo %BF%27 together with generic comment at the end (to make it work)
* uppercase.py - Replaces each keyword character with upper case value (e.g. select -> SELECT)
* varnish.py - Appends a HTTP header 'X-originating-IP' to bypass Varnish Firewall
* versionedkeywords.py - Encloses each non-function keyword with (MySQL) versioned comment
* versionedmorekeywords.py - Encloses each keyword with (MySQL) versioned comment
* xforwardedfor.py - Append a fake HTTP header 'X-Forwarded-For' (and alike)
        
        "technique": "BEUSTQ" --> SQL injection techniques to use --> # drop-down-menu (checkboxes not radiobutton) with values [BEUSTQ - Boolean-based blind(B) - Error-based(E) - Union query-based(U) -  Stacked queries(S) -  Time-based blind(T) - Inline queries(Q)]. 
Note: The value of each param which will be provided to the technique option is the Uppercase letter within the parentheses e.g. 'EU' for Error and Union types.
        "dnsDomain": null --> Domain name used for DNS exfiltration attack
        "secondUrl": null --> Resulting page URL searched for second-order response
    
    Page Comparison:
        "string": null --> String to match when query is evaluated to True
        "notString": null --> String to match when query is evaluated to False
        "regexp": null --> Regexp to match when query is evaluated to True
        "code": null --> HTTP code to match when query is evaluated to True
        "smart": false --> Perform thorough tests only if positive heuristic(s)
        "textOnly": false --> Compare pages based only on the textual content
        "titles": false --> Compare pages based only on their titles 

    Enumeration:
        "os": null --> --> # drop-down-menu [Any (default), Windows, Linux]
        "getBanner": false
        "extensiveFp": false
        "dbms": null --> --> # drop-down-menu [
            MySQL
            Oracle
            PostgreSQL
            Microsoft SQL Server
            Microsoft Access
            IBM DB2
            SQLite
            Firebird
            Sybase
            SAP MaxDB
            Informix
            MariaDB
            Percona
            MemSQL
            TiDB
            CockroachDB
            HSQLDB
            H2
            MonetDB
            Apache Derby
            Amazon Redshift
            Vertica
            Mckoi
            Presto
            Altibase
            MimerSQL
            CrateDB
            Greenplum
            Drizzle
            Apache Ignite
            Cubrid
            InterSystems Cache
            IRIS
            eXtremeDB
            FrontBase
        ]
        "dbmsCred": null -->  DBMS authentication credentials (user:password)

        N.B.: Exclude 'get' prefix from the GUI text of the following section:
        "getAll": false 
        "getCurrentUser": false,
        "getCurrentDb": false,
        "getHostname": false,
        "isDba": false,
        "getUsers": false,
        "getPasswordHashes": false,
        "getPrivileges": false,
        "getRoles": false,
        "getDbs": false,
        "getTables": false,
        "getColumns": false,
        "getSchema": false,
        "getCount": false,
        "dumpTable": false -->  --> When this option is selected the cursor focus must go to {"tbl": null} textfield and its frame color let's say make it red to warn the user it's a mandatory option. In short the option {"tbl": null} is must if this checkbox is selected.
        "dumpFormat": "CSV" -->  --> # drop-down-menu [CSV (default), HTML, SQLITE]
        "dumpAll": false
        "getComments": false --> 
        "getStatements": false --> SQL statements being run on DBMS (hovering)
        "search": false
        "excludeSysDbs": false
        BruteForce: (sub-section)
            "commonTables": false GUI:Bruteforce common tables 
            "commonColumns": false GUI:Bruteforce common columns
            "commonFiles": false GUI:Bruteforce common files
        "db": null --> Database(s) to enumerate or search
        "tbl": null --> Table(s) to enumerate or search
        "col": null --> Column(s) to enumerate or search
        "exclude": null --> DBMS database identifier(s) to not enumerate
        "user": null --> DBMS user to enumerate 
        "dumpWhere": null, --> Use WHERE condition while table dumping
        "limitStart": null --> First Entry (Row) to retrieve --> Input int value
        "limitStop": null, --> Last Entry (Row) to retrieve --> Input int value

        
    User-defined function injection:
        "udfInject": false --> Inject custom user-defined functions(hovering)
        "shLib": null --> Local path of the shared library 
    
    File system access:
    "fileRead": null --> Filepath to fetch from the database server's file system e.g. "C:/example.exe"
    "fileWrite": null --> A local filepath to upload to the database server's file system 
    "fileDest": null --> database server's filepath to write (upload) the specified file to

    Operating system takeover:
        "osCmd": null --> Execute an operating system command
        "osShell": false, --> Interactive OS-shell (requires admin priviliges)
        "osPwn": false --> shellcode by exploiting (in-memory|stand-alone payload stager)
        "osSmb": false --> shellcode by exploiting SMB reflection attack for Windows  
        "osBof": false --> shellcode by exploiting stored procedure buffer-overflow
        "privEsc": false --> Database process user privilege escalation via Metasploit's getsystem command
        "msfPath": null --> Local path where Metasploit Framework is installed

    Windows registry access:
        "regRead": false --> Read a Windows registry key value
        "regAdd": false --> Write a Windows registry key value data
        "regDel": false --> Delete a Windows registry key value
        "regKey": null --> Windows registry key
        "regVal": null --> Windows registry key value 
        "regData": null --> Windows registry key data 
        "regType": null --> Windows registry key type 

    

    "cleanup": false
    "repair": false,
    "saveConfig": null,
    "scope": null,
    "skipHeuristics": false,
    "testFilter": null,
    "testSkip": null,
    "timeLimit": null,
    "alert": null,
    "beep": false,
    "dependencies": false,
    "noLogging": false,
    "offline": false,
    
    "verbose": 1,
    
    "murphyRate": null,
    "smokeTest": false,
    "api": true,
    "database": "/tmp/sqlmapipc-1fnzbtj1"
            
    "retryOn": null,
    "rParam": null,
    "safeUrl": null,
    "safePost": null,
    "safeReqFile": null,
    "safeFreq": 0,
    "skipUrlEncode": false,
    "csrfToken": null,
    "csrfUrl": null,
    "csrfMethod": null,
    "csrfData": null,
    "csrfRetries": 0,
    "forceSSL": false,
    "chunked": false,
    "evalCode": null,
}

    status:

0 - in progress
1 - complete

    type:

0 - target
1 - techniques
2 - dbms_fingerprint
3 - banner
4 - current_user
5 - current_db
6 - hostname
7 - is_dba
8 - users
9 - passwords
10 - privileges
11 - roles
12 - dbs
13 - tables
14 - columns
15 - schema
16 - count
17 - dump_table
18 - search
19 - sql_query
20 - common_tables
21 - common_columns
22 - file_read
23 - file_write
24 - os_cmd
25 - reg_read
26 - statements

    returncode

null - still running
0 - ended gracefully
1 - general error occurred
255 - unhandled exception


