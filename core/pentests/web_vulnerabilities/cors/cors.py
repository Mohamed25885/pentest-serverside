import requests
import validators
import re
import tldextract

def add_header(original_headers, new_headers):
    merged_headers = {**original_headers, **new_headers}
    return merged_headers


def check_origin(url, headers, origin):
    headers["Origin"] = origin
    response = requests.get(url, headers=headers)
    return "Access-Control-Allow-Origin" in response.headers and response.headers["Access-Control-Allow-Origin"] == origin

def CORS(url, cookie):

    headers = {
        "Cookie": f"session={cookie}",
        "Origin": "*",
        "User-Agent": "Mozilla/5.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br"
    }
    if not validators.url(url):
        raise ValueError("Invalid URL format")
    else:
        domain = tldextract.extract(url)
        # check credentials
        credentials = 0
        response = requests.get(url)
        response = requests.get(url, headers=headers)
        credentials |= "Access-Control-Allow-Credentials" in response.headers and response.headers["Access-Control-Allow-Credentials"] == "true"


        # check wildcard
        wildcard = check_origin(url, headers, "*")

        # check attacker as origin
        attacker_origin = check_origin(url, headers, "attacker_origin.com")

        # check null origin
        null_origin = check_origin(url, headers, "null")

        # check subdomain
        subdomain = check_origin(url, headers, f"test.{domain.registered_domain}")

        # check subdomain for subdomain
        subdomain_for_subdomain = check_origin(url, headers, f"test1.test2.{domain.registered_domain}")

        if credentials:
            print("[+] Potential CORS Misconfiguration with Credentials")
        if wildcard:
            print("[+] CORS Misconfiguration -> Wildcard reflection")
        elif attacker_origin:
            print("[+] CORS Misconfiguration -> Any malicious domain reflection")
        elif null_origin:
            print("[+] CORS Misconfiguration -> Null origin reflection")
        elif subdomain:
            print(f"[+] CORS Misconfiguration -> Subdomain for reflection (test.{domain.registered_domain})")
        elif subdomain_for_subdomain:
            print(f"[+] CORS Misconfiguration -> Subdomain for subdomain reflection (test1.test2.{domain.registered_domain})")    

if __name__ == "__main__":
    url = input("Enter the target url: ")
    cookie = input("Enter your cookie: ")
    CORS(url, cookie)

# https://portswigger.net/web-security/cors/lab-basic-origin-reflection-attack ---> https://0a0700180342ad8e8074cbb8003f00cc.web-security-academy.net/accountDetails
