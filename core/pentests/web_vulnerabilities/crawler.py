import requests, re

url = input("Target URL: ")

user_agent = "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36"

def second_order_subdomain_takeover(url):
    regex = r"https?://(?:[a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.[a-zA-Z]+(?:/)?"
    try:
        response = requests.get(url, headers={"User-Agent": user_agent}, timeout=1).text
        links = set(re.findall(regex, response))
        
    except:
        pass
    if links:
        vul_links_2th_order = set()
        for link in links:
            try:
                res = requests.get(link, headers={"User-Agent": user_agent}, timeout=5)
            except:
                vul_links_2th_order.add(link)
                # outputfile.write("second order subdomain takeover for {url} in {link}")
        if vul_links_2th_order:
            print(f"May be vulnerable to second order subdomain takeover:")
            for l in vul_links_2th_order:
                print(l)
            print("-" * 50 + "\n")

# https://developers.facebook.com/docs/facebook-login/guides/access-tokens
def spider_secrets(url):
    js_file_regex = r"https?://[^\s]+\.js\b"
    secrets = {
        'Google API Key': r'AIza[0-9A-Za-z\\-_]{35}',
        'Google OAuth 2.0 Secret Key': r'[0-9a-zA-Z-_]{24}',
        'Google OAuth 2.0 Auth Code': r'4/[0-9A-Za-z-_]+',
        'Google OAuth 2.0 Refresh Token': r'1/[0-9A-Za-z-]{43}|1/[0-9A-Za-z-]{64}',
        'Google OAuth 2.0 Access Token': r'ya29.[0-9A-Za-z-_]+',
        'Github Token': r'(?i)github(.{0,20})?(?-i)["\"][0-9a-zA-Z]{35,40}',
        'GitHub Personal Access Token (Classic)': r'^ghp_[a-zA-Z0-9]{36}$',
        'GitHub Personal Access Token (Fine-Grained)': r'^github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59}$',
        'GitHub OAuth 2.0 Access Token': r'^gho_[a-zA-Z0-9]{36}$',
        'GitHub User-to-Server Access Token': r'^ghu_[a-zA-Z0-9]{36}$',
        'GitHub Server-to-Server Access Token': r'^ghs_[a-zA-Z0-9]{36}$',
        'GitHub Refresh Token': r'^ghr_[a-zA-Z0-9]{36}$',
        'Facebook Access Token': r'EAACEdEose0cBA[0-9A-Za-z]+',
        'Facebook Client ID': r'(?i)(facebook|fb)(.{0,20})?["\"][0-9]{13,17}',
        'Facebook Oauth': r'[f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*["|\"][0-9a-f]{32}["|\"]',
        'Facebook OAuth 2.0': r'[A-Za-z0-9]{125} (counting letters [2])',
        'Facebook Secret Key': r'(?i)(facebook|fb)(.{0,20})?(?-i)["\"][0-9a-f]{32}',
        'Instagram OAuth 2.0': r'[0-9a-fA-F]{7}.[0-9a-fA-F]{32}',
        'Hashtag': r'(?:#)([A-Za-z0-9_](?:(?:[A-Za-z0-9_]|(?:.(?!.))){0,28}(?:[A-Za-z0-9_]))?)',
        'Foursquare Client Key': r'[0-9a-zA-Z_][5,31]',
        'Foursquare Secret Key': r'R_[0-9a-f]{32}',
        'Picatic API Key': r'sk_live_[0-9a-z]{32}',
        'Stripe Standard API Key': r'sk_live_[0-9a-zA-Z]{24}',
        'Picatic Restricted API Key': r'sk_live_[0-9a-zA-Z]{24}',
        'Square Access Token': r'sqOatp-[0-9A-Za-z-_]{22}',
        'Square OAuth Secret': r'q0csp-[ 0-9A-Za-z-_]{43}',
        'PayPal / Braintree Access Token': r'access_token,production$[0-9a-z]{161[0-9a,]{32}',
        'Artifactory API Token': r'(?:\s|=|:|"|^)AKC[a-zA-Z0-9]{10,}',
        'Artifactory Password': r'(?:\s|=|:|"|^)AP[\dABCDEF][a-zA-Z0-9]{8,}',
        'Authorization Basic': r'basic [a-zA-Z0-9_\\-:\\.=]+',
        'Authorization Bearer': r'bearer [a-zA-Z0-9_\\-\\.=]+',
        'AWS Client ID': r'(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}',
        'AWS MWS Key': r'amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}',
        'AWS Secret Key': r'(?i)aws(.{0,20})?(?-i)["\"][0-9a-zA-Z\/+]{40}["\"]',
        'Base32': r'(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}={6}|[A-Z2-7]{4}={4}|[A-Z2-7]{5}={3}|[A-Z2-7]{7}=)?',
        'Base64': r'(eyJ|YTo|Tzo|PD[89]|aHR0cHM6L|aHR0cDo|rO0)[a-zA-Z0-9+/]+={0,2}',
        'Base_64': r'^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$',
        'Basic Auth Credentials': r'(?<=:\/\/)[a-zA-Z0-9]+:[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]+',
        'Cloudinary Basic Auth': r'cloudinary:\/\/[0-9]{15}:[0-9A-Za-z]+@[a-z]+',
        'Twilio Access Token': r'55[0-9a-fA-F]{32}',
        'Mailgun Access Token': r'key-[0-9a-zA-Z]{32}',
        'MailChimp Access Token': r'[0-9a-f]{32}-us[0-9]{1,2}',
        'Slack OAuth v2 Bot Access Token': r'xoxb-[0-9]{11}-[0-9]{11}-[0-9a-zA-Z]{24}',
        'Slack OAuth v2 User Access Token': r'xoxp-[0-9]{11}-[0-9]{11}-[0-9a-zA-Z]{24}',
        'Slack OAuth v2 Configuration Token': r'xoxe.xoxp-1-[0-9a-zA-Z]{166}',
        'Slack OAuth v2 Refresh Token': r'xoxe-1-[0-9a-zA-Z]{147}',
        'AWS Access ID Key': r'AKIA[0-9A-Z]{16}',
        'AWS Secret Key': r'[0-9a-zA-Z/+]{40}',
        'Amazon Marketing Services Auth Token': r'amzn.mws.[0-9a-f]{8}-[0-9a-f]{4}-10-9a-f1{4}-[0-9a,]{4}-[0-9a-f]{12}',
        'Google Cloud OAuth 2.0': r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}',
        'Google Cloud API Key': r'[A-Za-z0-9_]{21}--[A-Za-z0-9_]{8}',
        'Google Cloud Platform API Key': r'(?i)(google|gcp|youtube|drive|yt)(.{0,20})?["\"][AIza[0-9a-z\\-_]{35}]["\"]',
        'Google Drive API Key': r'AIza[0-9A-Za-z\\-_]{35}',
        'Google Drive Oauth': r'[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com',
        'Google Gmail API Key': r'AIza[0-9A-Za-z\\-_]{35}',
        'Google Gmail Oauth': r'[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com',
        'Google Oauth Access Token': r'ya29\\.[0-9A-Za-z\\-_]+',
        'Google Youtube API Key': r'AIza[0-9A-Za-z\\-_]{35}',
        'Google Youtube Oauth': r'[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\\.com',
        'Heroku API Key': r'[h|H][e|E][r|R][o|O][k|K][u|U].{0,30}[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}',
        'Heroku API_Key': r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}',
        'Heroku OAuth 2.0': r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}',
        'IPv4': r'\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\b',
        'IPv6': r'(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))',
        'Javascript Variables': r'(?:const|let|var)\s+\K(\w+?)(?=[;.=\s])',
        'LinkedIn Client ID': r'(?i)linkedin(.{0,20})?(?-i)["\"][0-9a-z]{12}["\"]',
        'LinkedIn Secret Key': r'(?i)linkedin(.{0,20})?["\"][0-9a-z]{16}["\"]',
        'Mailchamp API Key': r'[0-9a-f]{32}-us[0-9]{1,2}',
        'Mailgun API Key': r'key-[0-9a-zA-Z]{32}',
        'Mailto': r'(?<=mailto:)[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9.-]+',
        'MD5 Hash': r'[a-f0-9]{32}',
        'Picatic API Key': r'sk_live_[0-9a-z]{32}',
        'Slack Token': r'xox[baprs]-([0-9a-zA-Z]{10,48})?',
        'Slack Webhook': r'T[a-zA-Z0-9_]{10}/B[a-zA-Z0-9_]{10}/[a-zA-Z0-9_]{24}',
        'Stripe API Key': r'(pk|sk|rk)_(test|live)_[A-Za-z0-9]+',
        'Square Access Token': r'sqOatp-[0-9A-Za-z\\-_]{22}',
        'Square Oauth Secret': r'sq0csp-[ 0-9A-Za-z\\-_]{43}',
        'Twilio API Key': r'SK[0-9a-fA-F]{32}',
        'Twitter Client ID': r'(?i)twitter(.{0,20})?["\"][0-9a-z]{18,25}',
        'Twitter Oauth': r'[t|T][w|W][i|I][t|T][t|T][e|E][r|R].{0,30}["\"\\s][0-9a-zA-Z]{35,44}["\"\\s]',
        'Twitter Secret Key': r'(?i)twitter(.{0,20})?["\"][0-9a-z]{35,44}',
        'Twitter Access Token': r'[1-9][0-9]+-[0-9a-zA-Z]{40}',
        'Vault Token': r'[sb]\.[a-zA-Z0-9]{24}'
    }
    try:
        response = requests.get(url, headers={"User-Agent": user_agent}, timeout=2).text
        js_files = set(re.findall(js_file_regex, response))
        for js_file in js_files:
            res = requests.get(js_file, headers={"User-Agent": user_agent}, timeout=5).text
            for key, pattern in secrets.items():
                matches = re.findall(pattern, res)
                if matches:
                    print(f"found {key}: {matches[0]}\n-target URL: {url}\n-JavaScript File: {js_file}")
                    print("-" * 50 + "\n")
    except:
        pass

            
def broken_links(url):
    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    
    social_patterns = {
        "facebook": r"facebook\.com/([a-zA-Z0-9._-]+)",
        "twitter": r"(?:x\.com|twitter\.com)/([a-zA-Z0-9._-]+)",
        "linkedin": r"linkedin\.com/(in/[a-zA-Z0-9._-]+|company/[a-zA-Z0-9._-]+)",
        "youtube": r"youtube\.com/(?:@|c/)([a-zA-Z0-9._-]+)"
    }
    
    try:
        response = requests.get(url, headers={"User-Agent": user_agent}, timeout=5)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Error fetching the URL: {e}")
        return
    
    res = response.text
    broken_links = set()
    
    for platform, pattern in social_patterns.items():
        matches = re.findall(pattern, res)
        for match in matches:
            if isinstance(match, tuple):  # If there are multiple capture groups, filter the empty ones
                match = next(filter(None, match))
            
            if platform == "facebook":
                social_url = f"https://facebook.com/{match}"
            elif platform == "twitter":
                social_url = f"https://twitter.com/{match}"
            elif platform == "linkedin":
                social_url = f"https://linkedin.com/{match}"
            elif platform == "youtube":
                social_url = f"https://youtube.com/c/{match}"
            
            try:
                link_response = requests.get(social_url, headers={"User-Agent": user_agent}, timeout=10)
                if link_response.status_code >= 400:
                    broken_links.add(social_url)
            except:
                pass
    
    if broken_links:
        print("Broken social media links found:")
        for link in broken_links:
            print(link)
        print("-" * 50 + "\n")

spider_secrets(url)
broken_links(url)
second_order_subdomain_takeover(url)
