import requests
import hashlib
import validators
from typing import List


def check_response(url, header, value):
    headers = {
        header: value,
        "User-Agent": "Mozilla/5.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br"
    }

    response1 = requests.get(url)
    content_length1 = len(response1.content)

    response2 = requests.get(url, headers=headers)
    if response2.status_code == 200:
        content_length2 = len(response2.content)
        return content_length1 == content_length2


def host_header_attack(url: str, keys: List[str]) -> dict:
    host_injection = 0
    host_injection = check_response(url, "Host", "mahmoud3x0.com") or check_response(
        url, "X-Forwarded-For", "mahmoud3x0.com") or check_response(url, "X-Forwarded-Host", "mahmoud3x0.com")

    virtual_host = False

    for host in keys:
        host = host.strip()

        header_list = ["Host", "X-Forwarded-For", "X-Forwarded-Host", "X-Host"]
        for header in header_list:
            virtual_host = virtual_host or check_response(url, header, host)
            if virtual_host:
                break

        if virtual_host:
            break

    return_dict = {"status": True, "messages": []}

    if host_injection:
        return_dict['messages'].append(
            "[+] possible vulnerable to host header attacks")
    # Different responses of fuzzing
    if virtual_host:
        return_dict['messages'].append(
            "[+] possible vulnerable to virtual host enumeration")

    if not (host_injection or virtual_host):
        return_dict['status'] = False
        return_dict['messages'].append("[-] not vulnerable!")

    return return_dict


if __name__ == "__main__":

    url = input("Enter the target url: ")
    with open("./core/pentests/web_vulnerabilities/host_header_attack/virtual_host_enum.txt", "r") as file:
        keylist = file.read()
    print(host_header_attack(url, keylist.split('\n')))
