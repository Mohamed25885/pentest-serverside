import subprocess
import platform
from scapy.all import srp, Ether, ARP

broadcast_mac = "ff:ff:ff:ff:ff:ff"
active_hosts = []

import subprocess   #for running external commands
import platform     #for determining the operating system


def icmp_ping_sweep(network_prefix):
    active_hosts = []

    if platform.system().lower() == "windows":
        command_options = ['-n', '1', '-w', '1000']  # No of packets and timeout in milliseconds for Windows
    else:
        command_options = ['-c', '1', '-W', '1']  # No of packets and timeout in seconds for linux

    for i in range(1, 256):

        ip_address = network_prefix[0:network_prefix.rfind(".") + 1] + str(i)
        command = ['ping'] + command_options + [ip_address]

        try:
            # Use subprocess.run to execute the ping command and capture the output
            # The check=True parameter raises a subprocess.CalledProcessError if the ping command returns a non-zero exit code (indicating an error).
            subprocess.run(command, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) #subprocess.DEVNULL discards the standard output and standard error of the command
            active_hosts.append(ip_address)  # Add the active host to the list
        except subprocess.CalledProcessError:   #Ignore errors (host is not reachable)
            pass

    return active_hosts  # Return the list of active hosts

def arp_ping_sweep(network_prefix):

    arp_request = ARP(op=1, pdst=network_prefix)
    broadcast = Ether(dst=broadcast_mac)
    arp = broadcast / arp_request  # make broadcast to ARP request

    answered_packets, _ = srp(arp, timeout=2, verbose=0)# if host is active, respond with their MAC address, srp = > send receive protocol

    for sent, received in answered_packets:
        active_ip = received[ARP].psrc
        active_hosts.append(active_ip)

    return active_hosts

network_prefix = str(input("Enter target network prefix/subnet mask "))
type = str(input("Choose the used protocol: (ARP, ICMP)) "))

if type.lower() == "arp":
    active_hosts = arp_ping_sweep(network_prefix)

elif type.lower() == "icmp":
    active_hosts = icmp_ping_sweep(network_prefix)

for host in active_hosts:
    print(f"{host}")

