import socket
import sys
import logging
from scapy.all import *
from typing import List, Optional
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)


def tcp_scan(ip_address: str, ports: Optional[List] = None):
    if ports is None:
        ports = range(1, 65536)

    res = []
    for port in ports:

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.1)

        connection = s.connect_ex((ip_address, port))
        if connection == 0:
            try:
                serv = socket.getservbyport(port)
            except OSError:
                serv = "?"
            res.append(
                f"{serv} service open on {port}")

    s.close()

    return res


# Use send => when you just want to send packets and don't need to wait for a response.
# Use srp => when working with layer 2 protocols and you need to send packets and receive responses in a pair.
# Use sr1 => when you expect a single response and want to wait for it

def syn_scan(ip_address: str, ports: Optional[List] = None):
    if ports is None:
        ports = range(1, 65536)
    res = []
    for port in ports:  # known ports
        SYN_Packet = IP(dst=ip_address) / TCP(dport=port,
                                              flags="S")  # craft the SYN Packet
        # Send the packet and receive the response
        response = sr1(SYN_Packet, timeout=1, verbose=0)
        if response:
            if response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12:
                try:
                    serv = socket.getservbyport(port)
                except OSError:
                    serv = "?"
                res.append(
                    f"{serv} service open on {port}")

    return res


if __name__ == "__main__":
    # import requests
    # import json
    # print(json.dumps(str(requests.get("https://khantarish.com/api/v1/enums/dns/lookup", {"domain_name": "khantarish.com"}, headers={"accept":"application/json"}).content)))
    print(tcp_scan("161.97.107.40", [
          3306, 22, 80, 23, 443, 465, 111, 21, 23, 3307]))
