import tkinter as tk
from tkinter import ttk
from tkinter import messagebox  # Import messagebox module separately

import urllib.parse
import html
import base64
import base58
import base64
import codecs

class EncoderDecoderGUI:
    def __init__(self, master):
        self.master = master
        master.title("Encoder and Decoder")

        self.input_label = ttk.Label(master, text="Input:")
        self.input_entry = ttk.Entry(master, width=50)

        self.output_label = ttk.Label(master, text="Output:")
        self.output_text = tk.Text(master, height=10, width=50)

        self.encode_button = ttk.Button(master, text="Encode", command=self.encode_text)
        self.decode_button = ttk.Button(master, text="Decode", command=self.decode_text)

        self.setup_layout()

    def setup_layout(self):
        self.input_label.grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        self.input_entry.grid(row=0, column=1, columnspan=2, padx=10, pady=5)

        self.output_label.grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        self.output_text.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        self.encode_button.grid(row=2, column=1, padx=10, pady=5)
        self.decode_button.grid(row=2, column=2, padx=10, pady=5)

    def encode_text(self):
        try:
            input_text = self.input_entry.get()

            encoded_text = ""
            if input_text:
                encoded_text = self.get_encoded_text(input_text)

            self.output_text.delete(1.0, tk.END)
            self.output_text.insert(tk.END, encoded_text)
        except Exception as e:
            self.show_error_message(e)

    def decode_text(self):
        try:
            input_text = self.input_entry.get()

            decoded_text = ""
            if input_text:
                decoded_text = self.get_decoded_text(input_text)

            self.output_text.delete(1.0, tk.END)
            self.output_text.insert(tk.END, decoded_text)
        except Exception as e:
            self.show_error_message(e)

    def get_encoded_text(self, input_text):
        try:
            return (
                f"URL Encoded: {urllib.parse.quote(input_text)}\n"
                f"HTML Encoded: {html.escape(input_text)}\n"
                f"Base32 Encoded: {base64.b32encode(input_text.encode()).decode()}\n"
                f"Base58 Encoded: {base58.b58encode(input_text.encode()).decode()}\n"
                f"Base64 Encoded: {base64.b64encode(input_text.encode()).decode()}\n"
                f"Base85 Encoded: {base64.b85encode(input_text.encode()).decode()}\n"
                f"Base92 Encoded: {base64.b64encode(input_text.encode()).decode()}\n"
                f"Base8 Encoded: {''.join(format(ord(char), 'o') for char in input_text)}\n"
                f"Base16 Encoded: {''.join(format(ord(char), 'x') for char in input_text)}\n"
                f"ROT13 Encoded: {codecs.encode(input_text, 'rot_13')}\n"
                f"Binary Conversion: {' '.join(format(ord(char), '08b') for char in input_text)}\n"
                f"Hex Conversion: {' '.join(format(ord(char), '02x') for char in input_text)}\n"
            )
        except Exception as e:
            self.show_error_message(e)

    def get_decoded_text(self, input_text):
        try:
            return (
                f"URL Decoded: {urllib.parse.unquote(input_text)}\n"
                f"HTML Decoded: {html.unescape(input_text)}\n"
                f"Base32 Decoded: {base64.b32decode(input_text.encode()).decode()}\n"
                f"Base58 Decoded: {base58.b58decode(input_text.encode()).decode()}\n"
                f"Base64 Decoded: {base64.b64decode(input_text.encode()).decode()}\n"
                f"Base85 Decoded: {base64.b85decode(input_text.encode()).decode()}\n"
                f"Base92 Decoded: {base64.b64decode(input_text.encode()).decode()}\n"
                f"Base8 Decoded: {self.decode_base8(input_text)}\n"
                f"Base16 Decoded: {self.decode_base16(input_text)}\n"
                f"ROT13 Decoded: {codecs.encode(input_text, 'rot_13')}\n"
            )
        except Exception as e:
            self.show_error_message(e)

    def decode_base8(self, input_text):
        try:
            return ''.join(chr(int(char, 8)) for char in input_text.split())
        except Exception as e:
            self.show_error_message(e)

    def decode_base16(self, input_text):
        try:
            return ''.join(chr(int(char, 16)) for char in input_text.split())
        except Exception as e:
            self.show_error_message(e)

    def show_error_message(self, error):
        messagebox.showerror("Error", f"An unexpected error occurred: {str(error)}")

if __name__ == "__main__":
    root = tk.Tk()
    gui = EncoderDecoderGUI(root)
    root.mainloop()
