from typing import List
import nmap3
import subprocess
import json
from .threaded_result import threaded_string_processing
# from app.exceptions import TargetException
# from core.utils.validation import TargetValidation
nmap = nmap3.Nmap()


def extract_cpes(results) -> List[dict]:
    live_ips = set()
    cves = set()
    # print(results)
    for ip, details in results.items():
        if not isinstance(details, dict):
            continue

        if not details.get('ports', []):
            continue

        for port_info in details.get('ports', []):
            for cpe_infos in port_info.get('cpe', []):
                # print(cpe_infos)
                for _, cpe in cpe_infos.items():

                    live_ips.add(cpe)

            for scripts in port_info.get('scripts', []):
                if not scripts.get('data', {}):
                    continue

                for _, cpe in scripts['data'].items():
                    if not isinstance(cpe, dict):
                        continue
                    if not cpe.get('children', []) or not isinstance(cpe['children'], List):
                        continue

                    for child in cpe['children']:
                        try:
                            f = float(child['cvss'])
                            if f:
                                cves.add(child.get('id', ''))
                        except:
                            continue

    def fix_cpe(cpe: str) -> str:
        cpe = cpe.split(':')
        cpe[1] = cpe[1].replace("/", '')
        cpe.insert(1, '2.3')
        return ":".join(cpe)
    cpes = list(map(fix_cpe, live_ips))

    # Example usage

    num_threads = 4

    processed_data = threaded_string_processing(cpes, num_threads)
    final_cves = list(cves) + processed_data
    final_cves = [ele for ele in final_cves if ele != []]

    return {
        "cpes": cpes,
        "cves": final_cves,

    }


def target_cpes(target: str) -> List[dict]:
    res = nmap.nmap_version_detection(target, "-sV -T5 --script=vulners")

    #res = json.loads(open("core/pentests/vulnerabilities/test.json").read())
    # print(res)
    return extract_cpes(res)


if __name__ == "__main__":

    print(target_cpes("feng.bu.edu.eg"))
