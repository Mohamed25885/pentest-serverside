import socket
import sys
import logging
import dns.resolver
from scapy.all import *

logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

def tcp_scan(ip_address):
    try:
        for port in range(1, 65355):    #known ports
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   #indicate that a socket will use IPv4 & TCP connection
            s.settimeout(0.1)
            connection = s.connect_ex((ip_address, port))    #Return 0 If the connection is successful and make error if fail
            if connection == 0:
                print(f"[+] {socket.getservbyport(port)} service open on {port} ")
    except KeyboardInterrupt:
        print("\nExiting Program.")
        sys.exit()
    except socket.gaierror:
        print("\ncann't be resolved.")
        sys.exit()
    except (socket.error, socket.timeout):
        print("\ncann't connect.")
        sys.exit()
    finally:
            sock.close()


# Use send => when you just want to send packets and don't need to wait for a response.
# Use srp => when working with layer 2 protocols and you need to send packets and receive responses in a pair.
# Use sr1 => when you expect a single response and want to wait for it

def syn_scan(ip_address):

    for port in range(1, 65355):  # known ports
        SYN_Packet = IP(dst=ip_address) / TCP(dport=port, flags="S")    #craft the SYN Packet
        response = sr1(SYN_Packet, timeout=1, verbose=0)        #Send the packet and receive the response
        if response:
            if response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12:
                print(f"[+] {socket.getservbyport(port)} service open on {port} ")

    #0x12 corresponds to the SYN-ACK flag combination. In binary, 0x12 is 00010010.



ip_address = str(input("Enter the target IP or domain name "))
ip_address = socket.gethostbyname(ip_address)
type = str(input("enter the scanning type (TCP, SYN) "))

if type.lower() == "tcp":
    tcp_scan(ip_address)
elif type.lower() == "tcp":
    syn_scan(ip_address)

#
# records = ["A", "AAAA", "MX", "NS", "SOA", "SRV", "CNAME"]
# for record in records:
#     q = dns.resolver.query(IP, record, raise_on_no_answer=False)
#     q = q.rrset       #convert this value from object to text
#     if q is not None:
#         print(q)