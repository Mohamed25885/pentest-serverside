from typing import List
import jwt
import threading


class JWtForce:
    def __init__(self) -> None:
        self.key_found = False
        self.return_dict = {"status": False, "messages": {}}

    def jwt_force(self, jwt_string: str, keylist: List[str], algo: str):
        # Global variable to signal the threads to stop

        # Function to check if the key is correct
        def check_key(key, jwt_string):
            # global key_found, return_dict
            try:
                # If the decoded JWT token matches the payload, then it is the correct key
                decoded_payload = jwt.decode(
                    jwt_string, key, algorithms=algo)
                self.return_dict = {"status": True, "messages": {
                    'key': key, 'payload': decoded_payload, 'algo': algo}}

                self.key_found = True  # Set the global variable to signal other threads to stop
                return True
            except jwt.exceptions.InvalidTokenError:
                pass

        # Function to run threads for key bruteforcing
        def run_bruteforce(keys, jwt_string):
            # global key_found
            for key in keys:
                if self.key_found:
                    return True
                check_key(key.strip(), jwt_string)

        # The JWT token that we want to decode

        # Set the number of threads you want to run
        num_threads = 5

        # Divide the keys into num_threads parts
        keys_per_thread = len(keylist) // num_threads

        if len(keylist) < num_threads:
            keys_per_thread = num_threads

        threads = []

        # Start threads with the appropriate range for each thread
        for i in range(num_threads):
            start = i * keys_per_thread
            if i == num_threads - 1:
                end = len(keylist)
            else:
                end = (i + 1) * keys_per_thread

            t = threading.Thread(target=run_bruteforce,
                                 args=(keylist[start:end], jwt_string))
            threads.append(t)
            t.start()

        # Wait for all threads to finish or for a correct key to be found
        for t in threads:
            t.join()

        # If a correct key is found, print a message
        if self.key_found:

            return self.return_dict
        else:
            return


if __name__ == "__main__":
    jwt_test = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.8PaNTjtW-GSAZb44vtkgPboisyrUbDAYIfK8vJ2-c5Q'
    keylist = None
    with open('./core/pentests/jwt/jwtlist.txt', 'r') as file:
        keylist = file.read()
    print(JWtForce().jwt_force(
        jwt_test, ['test', 'ggsgvfddvgf'], algo="HS256"))
