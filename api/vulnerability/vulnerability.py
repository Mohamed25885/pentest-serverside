from fastapi import APIRouter, Response, Depends, Query
from typing import List
from core.fastapi.dependencies import PermissionDependency, AllowAll
from app.vulnerability.services.vulnerability import VulnerabilityService
from app.user.schemas import (
    ExceptionResponseSchema,
)
from api.vulnerability.response import VulnerabilityQueryResponse, VulnerabilityResponse
from api.vulnerability.request.vulnerability import VulnerabilityStoreRequest
from fastapi.exceptions import HTTPException
from api.common.response.deleted_response import DeletedResponse
from core.exceptions import IDNotFoundException
from api.common.response import DefaultDataResponse

vulnerability_router = APIRouter()


""" @vulnerability_router.get(
    "",
    response_model=List[VulnerabilityResponse],
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def index():
    return await VulnerabilityService.list_vulnerabilities()

@vulnerability_router.get(
    "/query",
    response_model=VulnerabilityQueryResponse,
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def query_service(
    service_name=Query(),
    version=Query(""),
):
    return await VulnerabilityService.query_service(service_name, version)


@vulnerability_router.post(
    "/store",
    response_model=VulnerabilityResponse,
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def store(vulnerability: VulnerabilityStoreRequest):
    return await VulnerabilityService.store(vulnerability)


@vulnerability_router.put(
    "/{id}/update",
    response_model=VulnerabilityResponse,
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def update(vulnerability: VulnerabilityStoreRequest, id: int):
    return await VulnerabilityService.update(vulnerability, id)


@vulnerability_router.delete(
    "/{id}",
    response_model=DeletedResponse,
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def delete(id: int):
    await VulnerabilityService.delete(id)
    return DeletedResponse
 """


@vulnerability_router.get(
    "/target-cpe",
    # response_model=List[VulnerabilityResponse],
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def target_cpe(
        url: str = Query(max_length=200),
):
    return DefaultDataResponse(data=await VulnerabilityService.target_cpe(url))


@vulnerability_router.get(
    "/cve-lookup",
    # response_model=List[VulnerabilityResponse],
    responses={"400": {"model": ExceptionResponseSchema}},
    dependencies=[Depends(PermissionDependency([AllowAll]))],
)
async def cve_lookup(
        cpe: str = Query(max_length=200),
):
    return DefaultDataResponse(data=await VulnerabilityService.cve_lookup(cpe))
