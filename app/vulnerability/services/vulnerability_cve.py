from typing import Optional, List

from sqlalchemy import or_, select, and_
from sqlalchemy.exc import *

from app.vulnerability.models import Vulnerability, VulnerabilityCve
from app.user.schemas.user import LoginResponseSchema
from core.db import Transactional, session
from core.exceptions import (
    IDNotFoundException,
)
from core.utils.token_helper import TokenHelper
from api.vulnerability.request import VulnerabilityCveStoreRequest


class VulnerabilityCveService:
    def __init__(self):
        ...

    @staticmethod
    async def list_cves(service_id: int) -> List[VulnerabilityCve]:
        query = select(VulnerabilityCve).where(
            VulnerabilityCve.service_id == service_id)

        result = await session.execute(query)
        return result.scalars().all()

    @staticmethod
    async def store(vul: VulnerabilityCveStoreRequest, service_id: int) -> VulnerabilityCve | None:
        model = VulnerabilityCve(service_id=service_id)

        for var, value in vars(vul).items():
            setattr(model, var, value) if value else None

        session.add(model)
        try:
            await session.commit()
        except IntegrityError:
            raise IDNotFoundException

        await session.refresh(model)
        return model

    @staticmethod
    async def update(vul: VulnerabilityCveStoreRequest, id: int) -> VulnerabilityCve | None:
        res = await session.execute(select(VulnerabilityCve).
                                    where(VulnerabilityCve.id == id))

        model = res.scalar()
        if not model:
            raise IDNotFoundException

        for var, value in vars(vul).items():
            setattr(model, var, value) if value else None

        await session.commit()
        await session.refresh(model)
        return model

    @staticmethod
    async def delete(id: int) -> bool:
        res = await session.execute(select(VulnerabilityCve).
                                    where(VulnerabilityCve.id == id))

        model = res.scalar()
        if not model:
            raise IDNotFoundException

        await session.delete(model)
        await session.commit()
        return True
