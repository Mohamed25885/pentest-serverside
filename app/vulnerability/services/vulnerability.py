from typing import Optional, List

from sqlalchemy import or_, select, and_
import sqlalchemy.orm as orm

from app.vulnerability.models import Vulnerability
from app.user.schemas.user import LoginResponseSchema
from core.db import Transactional, session
from core.exceptions import (
    IDNotFoundException
)
from core.utils.token_helper import TokenHelper
from api.vulnerability.request.vulnerability import VulnerabilityStoreRequest
import core.pentests.vulnerabilities as vul
import app.vulnerability.exceptions as VulExcp

class VulnerabilityService:
    def __init__(self):
        ...

    @staticmethod
    async def target_cpe(url: str) -> List[dict]:

        try:
            return vul.target_cpes(url)
        except Exception as e:
            raise VulExcp.CPEException(str(e))
    
    @staticmethod
    async def cve_lookup(cpe: str) -> List[dict]:

        try:
            return vul.cve_lookup(cpe)
        except Exception as e:
            raise VulExcp.CVEException(str(e))

    @staticmethod
    async def list_vulnerabilities() -> List[Vulnerability]:
        query = select(Vulnerability)

        result = await session.execute(query)
        return result.scalars().all()

    @staticmethod
    async def query_service(service_name: str | None, version: str | None) -> Vulnerability:
        query = select(Vulnerability)\
            .where(Vulnerability.service_name.like(f"%{service_name}%"))\
            .where(Vulnerability.version.like(f"%{version}%"))\
            .options(orm.joinedload(Vulnerability.cves))

        result = await session.execute(query)
        return result.scalar()

    @staticmethod
    async def store(vul: VulnerabilityStoreRequest) -> Vulnerability:
        vul = Vulnerability(service_name=vul.service_name,
                            version=vul.version, is_vulnerable=vul.is_vulnerable)
        session.add(vul)
        await session.commit()
        await session.refresh(vul)
        return vul

    @staticmethod
    async def update(vul: VulnerabilityStoreRequest, id: int) -> Vulnerability | None:
        res = await session.execute(select(Vulnerability).
                                    where(Vulnerability.id == id))

        model = res.scalar()
        if not model:
            raise IDNotFoundException

        for var, value in vars(vul).items():
            setattr(model, var, value) if value else None

        await session.commit()
        await session.refresh(model)
        return model

    @staticmethod
    async def delete(id: int) -> bool:
        res = await session.execute(select(Vulnerability).
                                    where(Vulnerability.id == id))

        model = res.scalar()
        if not model:
            raise IDNotFoundException

        await session.delete(model)
        await session.commit()
        return True
